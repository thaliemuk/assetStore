package org.t2k.interactions.controllers;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.t2k.interactions.dal.DB;
import org.t2k.interactions.dal.Design;
import org.t2k.interactions.dal.View;
import org.t2k.interactions.models.AddComponentRequest;
import org.t2k.interactions.models.Component;
import org.t2k.interactions.models.Task;
import org.t2k.interactions.models.TaskNameResponse;
import org.t2k.interactions.models.exceptions.DbException;
import org.t2k.interactions.models.exceptions.EntityNotFoundException;
import org.t2k.interactions.services.tasks.TaskService;

import java.util.List;
import java.util.Map;

/**
 * Created by IntelliJ IDEA.
 * User: elad.avidan
 * Date: 29/06/2015
 * Time: 17:23
 */
@Controller
@RequestMapping("/tasks")
public class TaskController {

    private Logger logger = Logger.getLogger(this.getClass());

    @Autowired
    private TaskService taskService;

    @RequestMapping(method = RequestMethod.GET)
    public
    @ResponseBody
    List<TaskNameResponse> getAllTasksNames() throws DbException {
        logger.debug("About to get all tasks names.");
        List<TaskNameResponse> allTasksNames = DB.findAllByView(Design.TASK, View.ALL_TASKS_NAMES, TaskNameResponse.class);
        logger.debug(String.format("%d tasks had been successfully fetched.", allTasksNames.size()));
        return allTasksNames;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public
    @ResponseBody
    Task getTask(@PathVariable String id) throws DbException, EntityNotFoundException {
        logger.debug(String.format("About to get task %s.", id));
        Task task = DB.find(id, Task.class);
        logger.debug(String.format("Task %s had been successfully fetched.", task.getId()));
        return task;
    }

    /**
     * Adds a new task to tasks collection and all the components it components to the components collection in DB.
     *
     * @param task - a task with or without a list of components. All components and the task itself, must not contain any ids. Ids will be generated by server.
     * @return the given task with some extra data: task id, component id to each component along with its parent id, the task id and a list of its children ids.
     * @throws DbException
     */
    @RequestMapping(method = RequestMethod.POST)
    public
    @ResponseBody
    Map<String, String> addTask(@RequestBody Task task) throws DbException {
        logger.debug(String.format("About to add a new task. id: %s, client temporary id: %s.", task.getId(), task.getCId()));
        Map<String, String> clientIdsToServerIdsMap = taskService.addTaskToDb(task);
        logger.debug(String.format("Task %s had been successfully added.", task.getId()));
        return clientIdsToServerIdsMap;
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    public
    @ResponseBody
    Map<String, String> updateTask(@RequestBody Task task, @PathVariable String id) throws Exception {
        logger.debug(String.format("About to update task: %s.", id));
        if (!id.equals(task.getId())) {
            String errorMsg = String.format("The task's id %s isn't equal to the taskId %s from the request's path", task.getId(), id);
            logger.error(errorMsg);
            throw new Exception(errorMsg);
        }

        Map<String, String> cIdsToServerIdsMap = taskService.updateTask(task);
        logger.debug(String.format("Task %s had been successfully updated.", task.getId()));
        return cIdsToServerIdsMap;
    }

    /**
     * Deletes the task from task collection in DB, and all of its related components from the components collection in DB.
     * Also removes all related files from the file system
     *
     * @param id the id of the task to delete.
     * @throws DbException
     */
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public
    @ResponseBody
    void deleteTask(@PathVariable String id) throws DbException {
        logger.debug(String.format("About to delete task %s.", id));
        taskService.deleteTaskFromDb(id);
        logger.debug(String.format("Task %s had been successfully deleted.", id));
    }

    @RequestMapping(value = "/{taskId}/components", method = RequestMethod.POST)
    public @ResponseBody
    Map<String, String> addComponent(@RequestBody AddComponentRequest componentRequest, @PathVariable String taskId) throws Exception {
        Component component = componentRequest.getComponent();
        logger.debug(String.format("About to add a new componentId: %s, under parentId: %s, of taskId: %s", component.getId(), component.getParentId(), taskId));
        if (!taskId.equals(component.getTaskId())) {
            throw new Exception(String.format("The componentId: %s is not belong to taskId: %s", component.getId(), taskId));
        }

        Map<String, String> tempIdsToServerIdsMap = taskService.addComponent(componentRequest);
        logger.debug(String.format("componentId %s had been successfully added under componentId: %s, of taskId: %s.", component.getId(), component.getParentId(), taskId));
        return tempIdsToServerIdsMap;
    }

    @RequestMapping(value = "/{taskId}/components/multiple", method = RequestMethod.POST)
    public @ResponseBody
    Map<String, String> addMultipleComponents(@RequestBody List<AddComponentRequest> componentsRequest, @PathVariable String taskId) throws Exception {
        logger.debug(String.format("About to add several new components to taskId: %s", taskId));
        Map<String, String> tempIdsToServerIdsMap = taskService.addMultipleComponents(componentsRequest, taskId);
        logger.debug(String.format("New components were successfully added to taskId: %s.", taskId));
        return tempIdsToServerIdsMap;
    }

    @RequestMapping(value = "/{taskId}/components", method = RequestMethod.PUT)
    public @ResponseBody
    void updateComponentData(@RequestBody Component component, @PathVariable String taskId) throws Exception {
        logger.debug(String.format("About to update data of componentId: %s, under parentId: %s, of taskId: %s", component.getId(), component.getParentId(), taskId));
        if (!taskId.equals(component.getTaskId())) {
            throw new Exception(String.format("The componentId: %s is not belong to taskId: %s", component.getId(), taskId));
        }

        taskService.updateComponentData(component);
        logger.debug(String.format("Data of componentId %s had been successfully updated under componentId: %s, of taskId: %s.", component.getId(), component.getParentId(), taskId));
    }

    @RequestMapping(value = "/{taskId}/components/{componentId}", method = RequestMethod.DELETE)
    public @ResponseBody
    void deleteComponent(@PathVariable String componentId, @PathVariable String taskId) throws Exception {
        logger.debug(String.format("About to delete componentId: %s, from taskId: %s", componentId, taskId));
        taskService.deleteComponent(componentId, taskId);
        logger.debug(String.format("ComponentId %s had been successfully deleted from taskId: %s.", componentId, taskId));
    }
}